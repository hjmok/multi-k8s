#https://www.udemy.com/course/docker-and-kubernetes-the-complete-guide/learn/lecture/11628216#questions

#Anytime we use docker, we're giving ourselves super user permissions
sudo: required

services:
  #telling travis CI to automatically install a copy of docker into our running container
  - docker

#Declaring an environment variable so we can provide a unique tag to every deployment we make using the SHA value
#https://www.udemy.com/course/docker-and-kubernetes-the-complete-guide/learn/lecture/11628262#questions
env:
  global:
    - SHA=$(git rev-parse HEAD) #gives us the unique SHA value for each push on github
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1

#these are the first 4 steps that our travis CI should do
before_install:
  - openssl aes-256-cbc -K $encrypted_9f3b5599b056_key -iv $encrypted_9f3b5599b056_iv -in service-account.json.enc -out service-account.json -d #this takes the encrypted file that is stored on Travis CI's servers and unencrypt it. https://www.udemy.com/course/docker-and-kubernetes-the-complete-guide/learn/lecture/11628228#questions
  #First Step is for Google Cloud to be set up locally on our machine
  - curl https://sdk.cloud.google.com | bash > /dev/null; #here we're downloading Google Cloud SDK using this command. After the pipe |, it saves it locally do that directory.  https://ss64.com/bash/curl.html
  - source $HOME/google-cloud-sdk/path.bash.inc #this looks at the default install directory of Google Cloud SDK and sources the file path.bash.inc. This means that there are some configurations inside this file that are going to modify our shell inside of Travic C.I., and it is applied by the source command. https://ss64.com/bash/source.html
  - gcloud components update kubectl #this updates and installs kubectl inside of the Travic CI environment
  #Second Step is to configure the SDK without Google Cloud authorization info
  #https://www.udemy.com/course/docker-and-kubernetes-the-complete-guide/learn/lecture/25408376#questions
  - gcloud auth activate-service-account --key-file service-account.json #in order to give Google Cloud SDK access to our account, we have to activate a service account and provide a set of credentials inside of a file called service-account.json.
  - gcloud config set project multi-k8s-329921 #telling Google Cloud to select the multi-k8s project ID. https://www.udemy.com/course/docker-and-kubernetes-the-complete-guide/learn/lecture/11628230#questions
  - gcloud config set compute/zone us-central1-c #setting the location to where this cluster is set.
  - gcloud container clusters get-credentials multi-cluster #telling Google Cloud to use the multi-cluster cluster made in the Kubernetes engine
  #Third Step is to log into Docker CLI
  #https://www.udemy.com/course/docker-and-kubernetes-the-complete-guide/learn/lecture/11628232#questions
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin ##Log in to the Docker CLI
  - docker build -t hjmok/react-test -f ./client/Dockerfile.dev ./client #this command builds our docker image using Dockerfile.dev in our client working directory, then creates the build context within the client folder as well with ./client. Also providing it a tag name using -t of "hjmok/react-test" so we don't have to worry about a long ID

#Fourth Step is to build the "test" version of multi-client
#https://www.udemy.com/course/docker-and-kubernetes-the-complete-guide/learn/lecture/15531126#questions
script:
  #script section contains all the commands needed to run the test suites
  - docker run -e CI=true hjmok/react-test npm test

deploy:
  #https://www.udemy.com/course/docker-and-kubernetes-the-complete-guide/learn/lecture/11628234#questions
  provider: script #telling Travis not to try anything with our project, we'll take care of the deployment with our own script, so just run the script file for us
  script: bash ./deploy.sh #so this is the script that the provider above is going to use to deploy our image
  on:
    branch: master #so only run the script if we're working on the master branch. Which makes sense during deployment, we'd be using the master branch to push all changes
